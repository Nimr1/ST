{"version":3,"file":"index.js","sources":["../src/utils.js","../src/angles.js","../src/constants.js","../src/elements.js","../src/lambert.js","../src/propagation.js","../src/orbit.js"],"sourcesContent":["import * as math from 'mathjs';\n\n/**\n * Implements modulo (as distinct from the remainder operator)\n *\n * @param {number} x\n * @param {number} y\n * @returns {number}\n */\nexport const modulo = (x, y) => ((x % y) + y) % y;\n\n/**\n * Generates a rotation matrix\n *\n * @param {number} angle\n * @param {number} axis\n */\nexport const rotation_matrix = (angle, axis) => {\n  const c = Math.cos(angle);\n  const s = Math.sin(angle);\n  const a1 = modulo((axis + 1), 3);\n  const a2 = modulo((axis + 2), 3);\n\n  const R = math.zeros([3, 3]);\n  R[axis][axis] = 1;\n  R[a1][a1] = c;\n  R[a1][a2] = -s;\n  R[a2][a1] = s;\n  R[a2][a2] = c;\n\n  return R;\n};\n\nexport default {\n  modulo,\n  rotation_matrix\n};\n","import { modulo } from './utils.js';\n\n// See: https://github.com/poliastro/poliastro/blob/main/src/poliastro/core/angles.py\n\n// Converts eccentric anomaly to mean anomaly\nexport const E_to_M = (E, ecc) => {\n  return E - ecc * Math.sin(E);\n};\n\n// Converts mean anomaly to eccentric anomaly\nexport const M_to_E = (M, ecc) => {\n  let E1, fVal, fDer, step;\n  let E = M < 0 ? M - ecc : M + ecc; // Initial guess for elliptical eccentric anomaly\n\n  for (let i = 0; i < 50; i++) {\n    fVal = E_to_M(E, ecc) - M;\n    fDer = 1 - ecc * Math.cos(E);\n    step = fVal / fDer;\n    E1 = E - step;\n\n    if (Math.abs(E1 - E) < 1e-7) {\n      break;\n    } else {\n      E = E1;\n    }\n  }\n\n  return E1;\n}\n\n// Converts eccentric anomaly to true anomaly\nexport const E_to_nu = (E, ecc) => {\n  return 2 * Math.atan(Math.sqrt((1 + ecc) / (1 - ecc)) * Math.tan(E / 2));\n}\n\n// Converts true anomaly to eccentric anomaly\nexport const nu_to_E = (nu, ecc) => {\n  return 2 * Math.atan(Math.sqrt((1 - ecc) / (1 + ecc)) * Math.tan(nu / 2));\n}\n\n// Converts true anomaly to hyperbolic eccentric anomaly\nexport const F_to_M = (F, ecc) => {\n  return ecc * Math.sinh(F) - F;\n};\n\n// Converts mean anomaly to hyperbolic eccentric anomaly\nexport const M_to_F = (M, ecc) => {\n  let F1, fVal, fDer, step;\n  let F = Math.asinh(M / ecc); // Initial guess for hyperbolic eccentric anomaly\n\n  for (let i = 0; i < 50; i++) {\n    fVal = F_to_M(F, ecc) - M;\n    fDer = ecc * Math.cosh(F) - 1;\n    step = fVal / fDer;\n    F1 = F - step;\n\n    if (Math.abs(F1 - F) < 1e-7) {\n      break;\n    } else {\n      F = F1;\n    }\n  }\n\n  return F;\n}\n\n// Converts hyperbolic eccentric anomaly to true anomaly\nexport const F_to_nu = (F, ecc) => {\n  return 2 * Math.atan(Math.sqrt((ecc + 1) / (ecc - 1)) * Math.tanh(F / 2));\n}\n\n// Converts true anomaly to hyperbolic eccentric anomaly\nexport const nu_to_F = (nu, ecc) => {\n  return 2 * Math.atanh(Math.sqrt((ecc - 1) / (ecc + 1)) * Math.tan(nu / 2));\n}\n\n// Converts mean anomaly to true anomaly\nexport const M_to_nu = (M, ecc, delta = 1e-2) => {\n  if (ecc < 1 - delta) {\n    // Elliptical\n    M = modulo((M + Math.PI), (2 * Math.PI)) - Math.PI;\n    return E_to_nu(M_to_E(M, ecc), ecc);\n  } else if (ecc < 1) {\n    // Near parabolic low\n    return D_to_nu(M_to_D_near_parabolic(M, ecc));\n  } else if (ecc == 1) {\n    // Parabolic\n    return D_to_nu(M_to_D(M));\n  } else if (ecc < 1 + delta) {\n    // Near parabolic high\n    return D_to_nu(M_to_D_near_parabolic(M, ecc));\n  } else {\n    // Hyperbolic\n    return F_to_nu(M_to_F(M, ecc), ecc);\n  }\n}\n\n// Converts true anomaly to mean anomaly\nexport const nu_to_M = (nu, ecc, delta = 1e-2) => {\n  if (ecc < 1 - delta) {\n    // Elliptical\n    return E_to_M(nu_to_E(nu, ecc), ecc);\n  } else if (ecc < 1) {\n    // Near parabolic low\n    return D_to_M_near_parabolic(nu_to_D(nu), ecc);\n  } else if (ecc == 1) {\n    // Parabolic\n    return D_to_M(nu_to_D(nu));\n  } else if (ecc < 1 + delta) {\n    // Near parabolic high\n    return D_to_M_near_parabolic(nu_to_D(nu), ecc);\n  } else {\n    // Hyperbolic\n    return F_to_M(nu_to_F(nu, ecc), ecc);\n  }\n}\n\n// Converts parabolic anomaly to mean anomaly\nexport const D_to_M = (D) => {\n  return D + D ** 3 / 3;\n}\n\nexport const D_to_M_near_parabolic = (D, ecc) => {\n  const x = (ecc - 1) / (ecc + 1) * (D ** 2);\n  if (Math.abs(x) >= 1) throw new Error('abs(x) must be less than 1');\n  const S = _S_x(ecc, x);\n  return Math.sqrt(2 / (1 + ecc)) * D + Math.sqrt(2 / (1 + ecc) ** 3) * (D**3) * S;\n}\n\n// Parabolic eccentric anomaly from mean anomaly, near parabolic case.\nexport const M_to_D_near_parabolic = (M, ecc) => {\n  let D1, fVal, fDer, step;\n  let D = M_to_D(M); // initial guess for parabolic eccentric anomaly\n\n  for (let i = 0; i < 50; i++) {\n    fVal = D_to_M_near_parabolic(D, ecc) - M;\n    fDer = _kepler_equation_prime_near_parabolic(D, ecc);\n    step = fVal / fDer;\n    D1 = D - step;\n\n    if (Math.abs(D1 - D) < 1.48e-8) {\n      break;\n    } else {\n      D = D1;\n    }\n  }\n\n  return D;\n}\n\n// Converts mean anomaly to parabolic anomaly\nexport const M_to_D = (M) => {\n  const B = 3 * M / 2;\n  const A = (B + (1 + B ** 2) ** 0.5) ** (2 / 3);\n  return 2 * A * B / (1 + A + A ** 2);\n}\n\n// Converts parabolic anomaly to true anomaly\nexport const D_to_nu = (D) => {\n  return 2 * Math.atan(D)\n}\n\n// Converts true anomaly to parabolic anomaly\nexport const nu_to_D = (nu) => {\n  return Math.tan(nu / 2);\n}\n\nconst _kepler_equation_prime_near_parabolic = (D, ecc) => {\n  const x = (ecc - 1) / (ecc + 1) * (D ** 2);\n  if (Math.abs(x) >= 1) throw new Error('abs(x) must be less than 1');\n  const S = _dS_x_alt(ecc, x);\n  return Math.sqrt(2 / (1 + ecc)) + Math.sqrt(2 / (1 + ecc) ** 3) * (D ** 2) * S;\n};\n\nconst _S_x = (ecc, x, atol = 1e-12) => {\n  if (Math.abs(x) >= 1) throw new Error('abs(x) must be less than 1');\n  let S = 0;\n  let k = 0;\n\n  while (true) {\n    const S_old = S;\n    S += (ecc - 1 / (2 * k + 3)) * x ** k;\n    k += 1;\n\n    if (Math.abs(S - S_old) < atol) return S;\n  }\n};\n\nconst _dS_x_alt = (ecc, x, atol = 1e-12) => {\n  if (Math.abs(x) >= 1) throw new Error('abs(x) must be less than 1');\n  let S = 0;\n  let k = 0;\n\n  while (true) {\n    const S_old = S\n    S += (ecc - 1 / (2 * k + 3)) * (2 * k + 3) * x**k\n    k += 1\n\n    if (Math.abs(S - S_old) < atol) return S;\n  }\n};\n\nexport default {\n  E_to_M,\n  M_to_E,\n  E_to_nu,\n  nu_to_E,\n  F_to_M,\n  M_to_F,\n  F_to_nu,\n  nu_to_F,\n  M_to_nu,\n  nu_to_M,\n  D_to_M,\n  M_to_D,\n  D_to_nu,\n  nu_to_D,\n  M_to_D_near_parabolic,\n  D_to_M_near_parabolic\n};\n","export const G = 6.67430E-11; // m3 kg-1 s-2\nexport const AU = 1.495978707e11; // m\n\nexport default {\n  G,\n  AU\n};\n","import * as math from 'mathjs';\nimport { E_to_nu, F_to_nu } from '../src/angles.js';\nimport { modulo, rotation_matrix } from '../src/utils.js';\n\n// See: https://github.com/poliastro/poliastro/blob/main/src/poliastro/core/elements.py\n\n/**\n * Converts from classical orbital elements to state vectors\n *\n * @param mu Standard gravitational parameter (km^3 / s^2)\n * @param p Semi latus rectum or parameter (km)\n * @param ecc Eccentricity\n * @param inc Inclination (rad)\n * @param raan Longitude of ascending node (rad)\n * @param argp Argument of periapsis (rad)\n * @param nu True anomaly (rad)\n */\nexport const coe2rv = (mu, p, ecc, inc, raan, argp, nu) => {\n  const pqw = math.dotMultiply(\n    [[ Math.cos(nu), Math.sin(nu), 0 ], [ -Math.sin(nu), ecc + Math.cos(nu), 0 ]],\n    [[0, 0, 0].fill(p / (1 + ecc * Math.cos(nu)), 0, 3), [0, 0, 0].fill(Math.sqrt(mu / p), 0, 3)]\n  );\n\n  let rm = rotation_matrix(raan, 2);\n  rm = math.multiply(rm, rotation_matrix(inc, 0));\n  rm = math.multiply(rm, rotation_matrix(argp, 2));\n\n  return math.multiply(pqw, math.transpose(rm));\n};\n\n/**\n * Converts from state vectors to classical orbital elements\n *\n * @param mu Standard gravitational parameter (km^3 / s^2)\n * @param r Position vector (km)\n * @param v Velocity vector (km / s)\n * @param tol Tolerance for eccentricity and inclination checks\n * @returns {Object} Classical orbital elements { p, ecc, inc, raan, argp, nu }\n */\nexport const rv2coe = (mu, r, v, tol = 1e-8) => {\n  let raan, argp, nu;\n\n  const h = math.cross(r, v);\n  const n = math.cross([0, 0, 1], h);\n  const e = math.divide(\n    math.subtract(\n      math.multiply(math.dot(v, v) - mu / math.norm(r), r),\n      math.multiply(math.dot(r, v), v)\n    ),\n    mu\n  );\n\n  const ecc = math.norm(e);\n  const p = math.dot(h, h) / mu;\n  const inc = Math.acos(h[2] / math.norm(h));\n\n  const circular = ecc < tol;\n  const equatorial = Math.abs(inc) < tol;\n\n  if (equatorial && !circular) {\n    // Equatorial elliptical orbit\n    raan = 0;\n    argp = Math.atan2(e[1], e[0]) % (2 * Math.PI);\n    nu = Math.atan2(math.dot(h, math.cross(e, r)) / math.norm(h), math.dot(r, e));\n  } else if (!equatorial && circular) {\n    // Non-equatorial circular orbit\n    raan = modulo(Math.atan2(n[1], n[0]), (2 * Math.PI));\n    argp = 0;\n    nu = Math.atan2(math.dot(r, math.cross(h, n)) / math.norm(h), math.dot(r, n));\n  } else if (equatorial && circular) {\n    // Equatorial circular orbit\n    raan = 0;\n    argp = 0;\n    nu = modulo(Math.atan2(r[1], r[0]), (2 * Math.PI));\n  } else {\n    const a = p / (1 - (ecc ** 2));\n    const mu_a = mu * a;\n\n    if (a > 0) {\n      // Elliptical orbit\n      const e_se = math.dot(r, v) / Math.sqrt(mu_a);\n      const e_ce = math.norm(r) * math.dot(v, v) / mu - 1;\n      const E = Math.atan2(e_se, e_ce);\n      nu = E_to_nu(E, ecc);\n    } else {\n      // Hyperbolic orbit\n      const e_sh = math.dot(r, v) / Math.sqrt(-mu_a);\n      const e_ch = math.norm(r) * (math.norm(v) ** 2) / mu - 1;\n      const F = Math.log((e_ch + e_sh) / (e_ch - e_sh)) / 2;\n      nu = F_to_nu(F, ecc);\n    }\n\n    raan = modulo(Math.atan2(n[1], n[0]), (2 * Math.PI));\n    const px = math.dot(r, n);\n    const py = math.dot(r, math.cross(h, n)) / math.norm(h);\n    argp = modulo((Math.atan2(py, px) - nu), (2 * Math.PI));\n  }\n\n  // Shift true anomaly into range of -pi to pi\n  nu = ((nu % (2 * Math.PI) + 3 * Math.PI) % (2 * Math.PI)) - Math.PI;\n\n  return { p, ecc, inc, raan, argp, nu };\n}\n\nexport default {\n  coe2rv,\n  rv2coe\n};\n","import * as math from 'mathjs';\nimport * as cephes from 'cephes';\n\n/**\n * Solves Lambert problem using Dario Izzo's devised algorithm and based on python implementation\n * found at https://github.com/jorgepiloto/lamberthub which is, in turn, based on the implementation\n * found at https://github.com/poliastro/poliastro.\n *\n * Reference for original algorithm: Izzo, D. (2015). Revisiting Lambert’s problem. Celestial Mechanics\n * and Dynamical Astronomy, 121(1), 1-15.\n *\n * Returns:\n * v1: Initial velocity vector.\n * v2: Final velocity vector.\n *\n * @param {number} mu Gravitational parameter, equivalent to GM of attractor body.\n * @param {Array.<number>} r1 Initial position vector\n * @param {Array.<number>} r2 Final position vector\n * @param {number} tof Time of flight in seconds\n * @param {number} M Number of revolutions. Must be an integer equal or greater than 0 value.\n * @param {boolean} prograde If true, specifies prograde motion. Otherwise, retrograde motion is imposed.\n * @param {boolean} low_path If two solutions are available, it selects between high or low path.\n * @param {number} maxiter Maximum number of iterations.\n * @param {number} atol Absolute tolerance.\n * @param {number} rtol Relative tolerance.\n */\nexport const solver = async (\n    mu,\n    r1,\n    r2,\n    tof,\n    M = 0,\n    prograde = true,\n    low_path = true,\n    maxiter = 35,\n    atol = 1e-5,\n    rtol = 1e-7\n  ) => {\n  await cephes.compiled;\n\n  // Check that input parameters are safe\n  validateGravitationalParam(mu);\n  validatePositions(r1, r2);\n\n  // Chord\n  const c = math.subtract(r2, r1);\n  const c_norm = math.norm(c);\n  const r1_norm = math.norm(r1);\n  const r2_norm = math.norm(r2);\n\n  // Semiperimeter\n  const s = math.multiply(math.add(r1_norm, r2_norm, c_norm), 0.5);\n\n  // Versors\n  const i_r1 = math.divide(r1, r1_norm);\n  const i_r2 = math.divide(r2, r2_norm);\n  let i_h = math.cross(i_r1, i_r2)\n  i_h = math.divide(i_h, math.norm(i_h));\n\n  // Geometry of the problem\n  let ll = Math.sqrt(1 - Math.min(1.0, c_norm / s));\n\n  // Compute the fundamental tangential directions\n  let i_t1, i_t2;\n\n  if (i_h[2] < 0) {\n    ll = -ll;\n    i_t1 = math.cross(i_r1, i_h);\n    i_t2 = math.cross(i_r2, i_h);\n  } else {\n    i_t1 = math.cross(i_h, i_r1);\n    i_t2 = math.cross(i_h, i_r2);\n  }\n\n  // Correct transfer angle parameter and tangential vectors regarding orbit's inclination\n  if (!prograde) {\n    ll = -ll;\n    i_t1 = math.multiply(-1, i_t1);\n    i_t2 = math.multiply(-1, i_t2);\n  }\n\n  // Non dimensional time of flight\n  const T = Math.sqrt(2 * mu / Math.pow(s, 3)) * tof;\n\n  // Find solutions and filter them\n  const [ x, y ] = _findXY(ll, T, M, maxiter, atol, rtol, low_path);\n\n  // Reconstruct\n  const gamma = Math.sqrt(mu * s / 2);\n  const rho = (r1_norm - r2_norm) / c_norm;\n  const sigma = Math.sqrt(1 - Math.pow(rho, 2));\n\n  // Compute the radial and tangential components at initial and final position vectors\n  const [ V_r1, V_r2, V_t1, V_t2 ] = _reconstruct(x, y, r1_norm, r2_norm, ll, gamma, rho, sigma);\n\n  // Solve for the initial and final velocity\n  const v1 = math.add(math.multiply(V_r1, math.divide(r1, r1_norm)), math.multiply(V_t1, i_t1));\n  const v2 = math.add(math.multiply(V_r2, math.divide(r2, r2_norm)), math.multiply(V_t2, i_t2));\n\n  return [ v1, v2 ];\n};\n\nconst validateGravitationalParam = (mu) => {\n  if (mu <= 0) throw new Error('Gravitational parameter must be positive');\n};\n\nconst validatePositions = (r1, r2) => {\n  validatePosition(r1);\n  validatePosition(r2);\n  if (r1.filter(e => r2.includes(e)).length === 3) throw new Error('Initial and final positions can not be the same');\n};\n\nconst validatePosition = (r) => {\n  if (r.length !== 3) throw new Error('Position vector must be three dimensional');\n  if (r.find(e => e !== 0) === undefined) throw new Error('Position can not be at origin');\n};\n\n/**\n * Reconstruct solution velocity vectors\n */\nconst _reconstruct = (x, y, r1, r2, ll, gamma, rho, sigma) => {\n  const V_r1 = gamma * ((ll * y - x) - rho * (ll * y + x)) / r1;\n  const V_r2 = -gamma * ((ll * y - x) + rho * (ll * y + x)) / r2;\n  const V_t1 = gamma * sigma * (y + ll * x) / r1;\n  const V_t2 = gamma * sigma * (y + ll * x) / r2;\n\n  return [ V_r1, V_r2, V_t1, V_t2 ];\n};\n\n/**\n * Computes all x, y for given number of revolutions.\n */\nconst _findXY = (ll, T, M, maxiter, atol, rtol, low_path) => {\n  // For abs(ll) == 1 the derivative is not continuous\n  if (Math.abs(ll) >= 1) throw new Error('Derivative is not continuous');\n\n  let M_max = Math.floor(T / Math.PI);\n  const T_00 = Math.acos(ll) + ll * Math.sqrt(1 - Math.pow(ll, 2)) // T_xM\n\n  // Refine maximum number of revolutions if necessary\n  if (T < (T_00 + M_max * Math.PI) && M_max > 0) {\n    const T_min = _computeTMin(ll, M_max, maxiter, atol, rtol);\n    if (T < T_min) M_max -= 1;\n  }\n\n  // Check if a feasible solution exist for the given number of revolutions\n  // This departs from the original paper in that we do not compute all solutions\n  if (M > M_max) throw new Error('No feasible solution, try lower M!');\n\n  // Initial guess\n  const x_0 = _initialGuess(T, ll, M, low_path);\n\n  // Start Householder iterations from x_0 and find x, y\n  const x = _householder(x_0, T, ll, M, atol, rtol, maxiter);\n  const y = _computeY(x, ll);\n\n  return [ x, y ];\n};\n\nconst _computeY = (x, ll) => Math.sqrt(1 - Math.pow(ll, 2) * (1 - Math.pow(x, 2)));\n\nconst _computePsi = (x, y, ll) => {\n  // The auxiliary angle psi is computed using Eq.(17) by the appropriate inverse function\n  if (-1 <= x && x < 1) {\n    // Elliptic motion - Use arc cosine to avoid numerical errors\n    return Math.acos(x * y + ll * (1 - Math.pow(x, 2)));\n  } else if (x > 1) {\n    // Hyperbolic motion - The hyperbolic sine is bijective\n    return Math.asinh((y - x * ll) * Math.sqrt(Math.pow(x, 2) - 1));\n  } else {\n    // Parabolic motion\n    return 0.0;\n  }\n};\n\nconst _tofEquation = (x, T0, ll, M) => _tofEquationY(x, _computeY(x, ll), T0, ll, M);\n\nconst _tofEquationY = (x, y, T0, ll, M) => {\n  let T_;\n\n  // Time of flight equation with externally computated y\n  if (M == 0 && Math.sqrt(0.6) < x && x < Math.sqrt(1.4)) {\n    const eta = y - ll * x;\n    const S_1 = (1 - ll - x * eta) * 0.5;\n    const Q = 4 / 3 * cephes.hyp2f1(3, 1, 5 / 2, S_1);\n    T_ = (Math.pow(eta, 3) * Q + 4 * ll * eta) * 0.5;\n  } else {\n    const psi = _computePsi(x, y, ll);\n    T_ = math.divide(\n      math.divide(psi + M * Math.PI, Math.sqrt(Math.abs(1 - Math.pow(x, 2)))) - x + ll * y,\n      (1 - Math.pow(x, 2))\n    );\n  }\n\n  return T_ - T0;\n};\n\nconst _tofEquationP = (x, y, T, ll) => (3 * T * x - 2 + 2 * Math.pow(ll, 3) * x / y) / (1 - Math.pow(x, 2));\n\nconst _tofEquationP2 = (x, y, T, dT, ll) => {\n  return (3 * T + 5 * x * dT + 2 * (1 - Math.pow(ll, 2)) * Math.pow(ll, 3) / Math.pow(y, 3)) / (1 - Math.pow(x, 2));\n};\n\nconst _tofEquationP3 = (x, y, _, dT, ddT, ll) => {\n  return (7 * x * ddT + 8 * dT - 6 * (1 - Math.pow(ll, 2)) * Math.pow(ll, 5) * x / Math.pow(y, 5)) /\n    (1 - Math.pow(x, 2));\n};\n\nconst _computeTMin = (ll, M, maxiter, atol, rtol) => {\n  let x_T_min, T_min;\n\n  if (ll === 1) {\n    x_T_min = 0.0\n    T_min = _tofEquation(x_T_min, 0.0, ll, M);\n  } else {\n    if (M === 0) {\n      x_T_min = Infinity;\n      T_min = 0.0;\n    } else {\n      // Set x_i > 0 to avoid problems at ll = -1\n      const x_i = 0.1;\n      const T_i = _tofEquation(x_i, 0.0, ll, M);\n      x_T_min = _halley(x_i, T_i, ll, atol, rtol, maxiter);\n      T_min = _tofEquation(x_T_min, 0.0, ll, M);\n    }\n  }\n\n  return T_min;\n};\n\nconst _initialGuess = (T, ll, M, low_path) => {\n  let x_0;\n\n  if (M === 0) {\n    // Single revolution\n    const T_0 = Math.acos(ll) + ll * Math.sqrt(1 - Math.pow(ll, 2)) + M * Math.PI; // Equation 19\n    const T_1 = 2 * (1 - Math.pow(ll, 3)) / 3; // Equation 21\n\n    if (T >= T_0) {\n      x_0 = Math.pow((T_0 / T), (2 / 3)) - 1;\n    } else if (T < T_1) {\n      x_0 = 5 / 2 * T_1 / T * (T_1 - T) / (1 - Math.pow(ll, 5)) + 1;\n    } else {\n      // This is the real condition, which is not exactly equivalent: T_1 < T < T_0\n      x_0 = Math.pow((T_0 / T), (Math.log2(T_1 / T_0))) - 1;\n    }\n\n    return x_0;\n  } else {\n    // Multiple revolution\n    const x_0l = (Math.pow(((M * Math.PI + Math.PI) / (8 * T)), (2 / 3)) - 1) / (\n      Math.pow(((M * Math.PI + Math.PI) / (8 * T)), (2 / 3)) + 1);\n    const x_0r = (Math.pow(((8 * T) / (M * Math.PI)), (2 / 3)) - 1) / (\n      Math.pow(((8 * T) / (M * Math.PI)), (2 / 3)) + 1);\n\n    // Filter out the solution\n    x_0 = low_path ? Math.max(x_0l, x_0r) : Math.min(x_0l, x_0r);\n\n    return x_0;\n  }\n};\n\n/**\n * Find a minimum of time of flight equation using the Halley method.\n */\nconst _halley = (p0, T0, ll, atol, rtol, maxiter) => {\n  for (let ii = 1; ii <= maxiter; ii++) {\n    const y = _computeY(p0, ll)\n    const fder = _tofEquationP(p0, y, T0, ll)\n    const fder2 = _tofEquationP2(p0, y, T0, fder, ll)\n\n    if (fder2 === 0) throw new Error('Derivative was zero');\n\n    const fder3 = _tofEquationP3(p0, y, T0, fder, fder2, ll);\n\n    // Halley step (cubic)\n    const p = p0 - 2 * fder * fder2 / (2 * Math.pow(fder2, 2) - fder * fder3);\n\n    if (Math.abs(p - p0) < rtol * Math.abs(p0) + atol) return p\n    p0 = p\n  }\n\n  throw new Error('Failed to converge');\n}\n\n/**\n * Find a zero of time of flight equation using the Householder method.\n */\nconst _householder = (p0, T0, ll, M, atol, rtol, maxiter) => {\n  for (let ii = 1; ii <= maxiter; ii++) {\n    const y = _computeY(p0, ll);\n    const fval = _tofEquationY(p0, y, T0, ll, M);\n    const T = fval + T0;\n    const fder = _tofEquationP(p0, y, T, ll)\n    const fder2 = _tofEquationP2(p0, y, T, fder, ll)\n    const fder3 = _tofEquationP3(p0, y, T, fder, fder2, ll)\n\n    // Householder step (quartic)\n    const p = p0 - fval * (\n      (Math.pow(fder, 2) - fval * fder2 / 2)\n      / (fder * (Math.pow(fder, 2) - fval * fder2) + fder3 * Math.pow(fval, 2) / 6));\n\n    if (Math.abs(p - p0) < rtol * Math.abs(p0) + atol) return p;\n    p0 = p;\n  }\n\n  throw new Error('Failed to converge');\n};\n\nexport async function multiSolver(mu, r1, r2, tof, vi1, vi2, progradeOptions = [true, false], lowpathOptions = [true]) {\n  let minDeltaV = null;\n  let bestSolutionV1;\n  let bestSolutionV2;\n\n  for (let prograde of progradeOptions) {\n\n    // low_path / high_path is only relevant for multi-revolution solutions\n    for (let low_path of lowpathOptions) {\n      try {\n        const [vf1, vf2] = await solver(mu, r1, r2, tof, 0, prograde, low_path);\n        const deltaV = math.norm(math.subtract(vi1, vf1)) + math.norm(math.subtract(vi2, vf2));\n        if (minDeltaV === null || deltaV < minDeltaV) {\n          minDeltaV = deltaV;\n          bestSolutionV1 = vf1;\n          bestSolutionV2 = vf2;\n        }\n      } catch (e) {\n        console.warn(e);\n      }\n    }\n  }\n\n  return {\n    v1: bestSolutionV1,\n    v2: bestSolutionV2,\n    deltaV: minDeltaV\n  };\n};\n\nexport default {\n  solver,\n  multiSolver\n};\n","import { modulo } from './utils.js';\nimport { rv2coe, coe2rv } from './elements.js';\nimport {\n  nu_to_E,\n  E_to_M,\n  M_to_E,\n  E_to_nu,\n  nu_to_D,\n  D_to_M,\n  D_to_M_near_parabolic,\n  M_to_D,\n  M_to_D_near_parabolic,\n  D_to_nu,\n  nu_to_F,\n  F_to_M,\n  M_to_F,\n  F_to_nu\n} from './angles.js';\n\n// See: https://github.com/poliastro/poliastro/blob/main/src/poliastro/core/propagation/farnocchia.py\n\n/**\n * Propagates an orbit using mean motion and returns new position and velocity vectors\n *\n * @param {number} mu Gravitational parameter (km^3 / s^2)\n * @param {number[]} r0 Initial position vector (km)\n * @param {number[]} v0 Initial velocity vector (km / s)\n * @param {number} tof Time of flight (sec)\n * @returns {number[][]} Final position and velocity vectors\n */\nexport const farnocchia_rv = (mu, r0, v0, tof) => {\n  const { p, ecc, inc, raan, argp, nu: nu0 } = rv2coe(mu, r0, v0);\n  const nu = farnocchia_coe(mu, p, ecc, inc, raan, argp, nu0, tof);\n  return coe2rv(mu, p, ecc, inc, raan, argp, nu);\n}\n\n/**\n * Returns the new true anomaly for a given time of flight\n *\n * @param {number} mu Gravitation parameter (km^3 / s^2)\n * @param {number} p Semi-latus rectum (km)\n * @param {number} ecc Eccentricity (rad)\n * @param {number} inc Inclination (rad)\n * @param {number} raan Longitude of ascending node (rad)\n * @param {number} argp Argument of periapsis (rad)\n * @param {number} nu True anomaly (rad)\n * @param {number} tof Time of flight (sec)\n */\nexport const farnocchia_coe = (mu, p, ecc, inc, raan, argp, nu, tof) => {\n  const q = p / (1 + ecc);\n  const delta_t0 = delta_t_from_nu(nu, ecc, mu, q);\n  const delta_t = delta_t0 + tof;\n  return nu_from_delta_t(delta_t, ecc, mu, q);\n};\n\n/**\n * Time elapsed since periapsis for given true anomaly.\n *\n * @param {number} nu True anomaly (rad)\n * @param {number} ecc Eccentricity\n * @param {number} mu Gravity parameter\n * @param {number} q Periapsis distance\n * @param {number} delta Parameter that controls the size of the near parabolic region\n * @returns {number} Time elapsed since periapsis\n */\nexport const delta_t_from_nu = (nu, ecc, mu = 1, q = 1, delta = 1e-2) => {\n  if (ecc < 0) throw new Error('ecc must be in [0, ∞)');\n  if ( nu >= Math.PI || nu < -Math.PI ) throw new Error('nu must be in [-pi, pi)');\n  let M, n;\n\n  if (ecc < 1 - delta) {\n    // Strong elliptic\n    const E = nu_to_E(nu, ecc); // (-pi, pi]\n    M = E_to_M(E, ecc); // (-pi, pi]\n    n = Math.sqrt(mu * (1 - ecc) ** 3 / q ** 3);\n  } else if (ecc < 1) {\n    const E = nu_to_E(nu, ecc); // (-pi, pi]\n\n    if (delta <= 1 - ecc * Math.cos(E)) {\n      // Strong elliptic\n      M = E_to_M(E, ecc); // (-pi, pi]\n      n = Math.sqrt(mu * (1 - ecc) ** 3 / q ** 3)\n    } else {\n      // Near parabolic\n      const D = nu_to_D(nu); // (-∞, ∞)\n      // If |nu| is far from pi this result is bounded\n      // because the near parabolic region shrinks in its vicinity,\n      // otherwise the eccentricity is very close to 1\n      // and we are really far away\n      M = D_to_M_near_parabolic(D, ecc);\n      n = Math.sqrt(mu / (2 * q ** 3));\n    }\n  } else if (ecc == 1) {\n    // Parabolic\n    const D = nu_to_D(nu); // (-∞, ∞)\n    M = D_to_M(D); // (-∞, ∞)\n    n = Math.sqrt(mu / (2 * q ** 3));\n  } else if (1 + ecc * Math.cos(nu) < 0) {\n    // Unfeasible region\n    return NaN;\n  } else if (ecc <= 1 + delta) {\n    // NOTE: Do we need to wrap nu here?\n    // For hyperbolic orbits, it should anyway be in\n    // (-arccos(-1 / ecc), +arccos(-1 / ecc))\n    const F = nu_to_F(nu, ecc); // (-∞, ∞)\n\n    if (delta <= ecc * Math.cosh(F) - 1) {\n      // Strong hyperbolic\n      M = F_to_M(F, ecc); // (-∞, ∞)\n      n = Math.sqrt(mu * (ecc - 1) ** 3 / q ** 3);\n    } else {\n      // Near parabolic\n      const D = nu_to_D(nu); // (-∞, ∞)\n      M = D_to_M_near_parabolic(D, ecc); // (-∞, ∞)\n      n = Math.sqrt(mu / (2 * q ** 3));\n    }\n  } else {\n    // Strong hyperbolic\n    const F = nu_to_F(nu, ecc); // (-∞, ∞)\n    M = F_to_M(F, ecc); // (-∞, ∞)\n    n = Math.sqrt(mu * (ecc - 1) ** 3 / q ** 3);\n  }\n\n  return M / n;\n};\n\n/**\n * True anomaly for given elapsed time since periapsis.\n *\n * @param {number} delta_t TIme elapsed since periapsis\n * @param {number} ecc Eccentricity\n * @param {number} mu Gravity parameter\n * @param {number} q Periapsis distance\n * @param {number} delta Parameter that controls the size of the near parabolic region\n */\nexport const nu_from_delta_t = (delta_t, ecc, mu = 1, q = 1, delta = 1e-2) => {\n  let nu;\n\n  if (ecc < 1 - delta) {\n    // Strong elliptic\n    const n = Math.sqrt(mu * (1 - ecc) ** 3 / q ** 3);\n    const M = n * delta_t;\n    // This might represent several revolutions,\n    // so we wrap the true anomaly\n    const E = M_to_E(modulo((M + Math.PI), (2 * Math.PI)) - Math.PI, ecc);\n    nu = E_to_nu(E, ecc);\n  } else if (ecc < 1) {\n    const E_delta = Math.acos((1 - delta) / ecc);\n    // Compute M assuming we are in the strong elliptic case and verify later\n    const n = Math.sqrt(mu * (1 - ecc) ** 3 / q ** 3);\n    const M = n * delta_t;\n\n    // Check against abs(M) because E_delta could also be negative\n    if (E_to_M(E_delta, ecc) <= Math.abs(M)) {\n      // Strong elliptic. This might represent several revolutions, so wrap the true anomaly\n      const E = M_to_E(modulo((M + Math.PI), (2 * Math.PI)) - Math.PI, ecc);\n      nu = E_to_nu(E, ecc);\n    } else {\n      // Near parabolic, recompute M\n      const n = Math.sqrt(mu / (2 * q ** 3));\n      const M = n * delta_t;\n      const D = M_to_D_near_parabolic(M, ecc);\n      nu = D_to_nu(D);\n    }\n  } else if (ecc == 1) {\n    // Parabolic\n    const n = Math.sqrt(mu / (2 * q ** 3));\n    const M = n * delta_t;\n    const D = M_to_D(M);\n    nu = D_to_nu(D);\n  } else if (ecc <= 1 + delta) {\n    const F_delta = Math.acosh((1 + delta) / ecc);\n    // Compute M assuming we are in the strong hyperbolic case and verify later\n    const n = Math.sqrt(mu * (ecc - 1) ** 3 / q ** 3);\n    const M = n * delta_t;\n\n    // Check against abs(M) because F_delta could also be negative\n    if (F_to_M(F_delta, ecc) <= Math.abs(M)) {\n      // Strong hyperbolic, proceed\n      const F = M_to_F(M, ecc);\n      nu = F_to_nu(F, ecc);\n    } else {\n      // Near parabolic, recompute M\n      const n = Math.sqrt(mu / (2 * q ** 3));\n      const M = n * delta_t;\n      const D = M_to_D_near_parabolic(M, ecc);\n      nu = D_to_nu(D);\n    }\n  } else {\n    // Strong hyperbolic\n    const n = Math.sqrt(mu * (ecc - 1) ** 3 / q ** 3);\n    const M = n * delta_t;\n    const F = M_to_F(M, ecc);\n    nu = F_to_nu(F, ecc);\n  }\n\n  return nu;\n}\n\nexport default {\n  delta_t_from_nu,\n  nu_from_delta_t,\n  farnocchia_coe,\n  farnocchia_rv\n};\n","import angles from './angles.js';\nimport { coe2rv, rv2coe } from './elements.js';\nimport { farnocchia_coe } from './propagation.js';\n\nclass Orbit {\n  /**\n   * Creates a new Orbit object\n   *\n   * @param {number} mu Gravitational parameter (km^3 / s^2)\n   * @param {number} p Semi-latus rectum (km)\n   * @param {number} ecc Eccentricity (rad)\n   * @param {number} inc Inclination (rad)\n   * @param {number} raan Longitude of ascending node (rad)\n   * @param {number} argp Argument of periapsis (rad)\n   * @param {number} nu True anomaly (rad)\n   * @param {number} epoch Time of true anomaly (sec)\n   */\n  constructor(mu, p, ecc, inc, raan, argp, nu, epoch = 0) {\n    this.mu = mu;\n    this.p = p;\n    this.ecc = ecc;\n    this.inc = inc;\n    this.raan = raan;\n    this.argp = argp;\n    this.nu = nu;\n    this.epoch = epoch;\n  }\n\n  /**\n   * Creates a new Orbit object from a set of state vectors\n   *\n   * @param {number} mu Gravitational parameter (km^3 / s^2)\n   * @param {number[]} r Position vector (km)\n   * @param {number[]} v Velocity vector (km / s)\n   * @param {number} epoch Time of true anomaly (sec)\n   * @returns\n   */\n  static fromStateVectors(mu, r, v, epoch = 0) {\n    const { p, ecc, inc, raan, argp, nu } = rv2coe(mu, r, v);\n    return new Orbit(mu, p, ecc, inc, raan, argp, nu, epoch);\n  }\n\n  // See constructor for signature\n  static fromClassicElements(mu, p, ecc, inc, raan, argp, nu, epoch = 0) {\n    return new Orbit(mu, p, ecc, inc, raan, argp, nu, epoch);\n  }\n\n  // Returns the semi-major axis in km\n  get a() {\n    return this.p / (1 - this.ecc ** 2);\n  }\n\n  // Returns the classical orbital elements\n  get coe() {\n    return { p: this.p, ecc: this.ecc, inc: this.inc, raan: this.raan, argp: this.argp, nu: this.nu };\n  }\n\n  // Returns the period in seconds\n  get period() {\n    return 2 * Math.PI * Math.sqrt(Math.abs(this.a) ** 3 / this.mu);\n  }\n\n  // Returns the orbital radius in km\n  get radius() {\n    return this.p / (1 + this.ecc * Math.cos(this.nu));\n  }\n\n  // Returns the state vectors in km / sec and km\n  get rv() {\n    const [ r, v ] = coe2rv(this.mu, this.p, this.ecc, this.inc, this.raan, this.argp, this.nu);\n    return { r, v };\n  }\n\n  /**\n   * Propagates the orbit by a given time of flight. Updates epoch and true anomaly\n   *\n   * @param {number} tof Time of flight (sec)\n   */\n  propagateFor(tof) {\n    this.nu = farnocchia_coe(this.mu, this.p, this.ecc, this.inc, this.raan, this.argp, this.nu, tof);\n    this.epoch += tof;\n  }\n\n  /**\n   * Propagates the orbit to a specific time. Updates epoch and true anomaly\n   *\n   * @param {number} epoch Epoch to propagate to (sec)\n   */\n  propagateTo(epoch) {\n    const tof = epoch - this.epoch;\n    this.propagateFor(tof);\n  }\n\n  /**\n   * Samples the orbit at a given time and returns state vectors.\n   *\n   * @param {number} epoch Time of true anomaly (sec)\n   * @returns\n   */\n  sampleAtEpoch(epoch) {\n    const tof = epoch - this.epoch;\n    const nu = farnocchia_coe(this.mu, this.p, this.ecc, this.inc, this.raan, this.argp, this.nu, tof);\n    return this.sampleAtAngle(nu);\n  }\n\n  /**\n   * Samples the orbit at a given true anomaly and returns state vectors.\n   *\n   * @param {number} nu True anomaly (rad)\n   * @returns\n   */\n  sampleAtAngle(nu) {\n    const [ r, v ] = coe2rv(this.mu, this.p, this.ecc, this.inc, this.raan, this.argp, nu);\n    return { r, v };\n  }\n\n  /**\n   * Samples the orbit at set of times and returns position vectors.\n   *\n   * @param {number} samples Number of samples to take\n   * @param {number} tof Time of flight between samples (sec)\n   * @param {number} start Epoch of first sample (sec\n   * @returns {number[]{}} Array of position vectors (km / s & km)\n   */\n  ephem(samples = 100, tof = null, start = null) {\n    if (!tof && this.ecc >= 1) throw new Error('tof must be specified for non elliptical orbits');\n    if (!tof) tof = this.period;\n    if (!start) start = this.epoch;\n\n    const dt = tof / samples;\n    const times = Array.from({ length: samples }, (_, i) => start + i * dt);\n    return times.map(t => this.sampleAtEpoch(t));\n  }\n}\n\nexport default Orbit;\n"],"names":["modulo","x","y","rotation_matrix","angle","axis","c","Math","cos","s","sin","a1","a2","R","math","zeros","E_to_M","E","ecc","M_to_E","M","E1","fVal","fDer","step","i","abs","E_to_nu","atan","sqrt","tan","nu_to_E","nu","F_to_M","F","sinh","M_to_F","F1","asinh","cosh","F_to_nu","tanh","nu_to_F","atanh","M_to_nu","delta","arguments","length","undefined","PI","D_to_nu","M_to_D_near_parabolic","M_to_D","nu_to_M","D_to_M_near_parabolic","nu_to_D","D_to_M","D","pow","Error","S","_S_x","D1","_kepler_equation_prime_near_parabolic","B","A","_dS_x_alt","atol","k","S_old","angles","G","AU","constants","coe2rv","mu","p","inc","raan","argp","pqw","dotMultiply","fill","rm","multiply","transpose","rv2coe","r","v","tol","h","cross","n","e","divide","subtract","dot","norm","acos","circular","equatorial","atan2","a","mu_a","e_se","e_ce","e_sh","e_ch","log","px","py","elements","solver","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","r1","r2","tof","prograde","low_path","maxiter","rtol","c_norm","r1_norm","r2_norm","i_r1","i_r2","i_h","ll","i_t1","i_t2","T","_findXY2","_findXY3","gamma","rho","sigma","_reconstruct2","_reconstruct3","V_r1","V_r2","V_t1","V_t2","v1","v2","_args","wrap","_callee$","_context","prev","next","cephes","compiled","validateGravitationalParam","validatePositions","add","min","_findXY","_slicedToArray","_reconstruct","abrupt","stop","_x","_x2","_x3","_x4","apply","validatePosition","filter","includes","find","M_max","floor","T_00","T_min","_computeTMin","x_0","_initialGuess","_householder","_computeY","_computePsi","_tofEquation","T0","_tofEquationY","T_","eta","S_1","Q","hyp2f1","psi","_tofEquationP","_tofEquationP2","dT","_tofEquationP3","_","ddT","x_T_min","Infinity","x_i","T_i","_halley","T_0","T_1","log2","x_0l","x_0r","max","p0","ii","fder","fder2","fder3","fval","multiSolver","_x5","_x6","_x7","_x8","_x9","_x10","_multiSolver","_callee2","vi1","vi2","progradeOptions","lowpathOptions","minDeltaV","bestSolutionV1","bestSolutionV2","_iterator","_step","_iterator2","_step2","_yield$solver","_yield$solver2","vf1","vf2","deltaV","_args2","_callee2$","_context2","_createForOfIteratorHelper","done","value","sent","t0","console","warn","t1","f","finish","t2","lambert","farnocchia_rv","r0","v0","_rv2coe","nu0","farnocchia_coe","q","delta_t0","delta_t_from_nu","delta_t","nu_from_delta_t","NaN","E_delta","F_delta","acosh","propagation","Orbit","epoch","_classCallCheck","_createClass","key","get","_coe2rv","_coe2rv2","propagateFor","propagateTo","sampleAtEpoch","sampleAtAngle","_coe2rv3","_coe2rv4","ephem","_this","samples","start","period","dt","times","Array","from","map","t","fromStateVectors","_rv2coe2","fromClassicElements"],"mappings":"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"}