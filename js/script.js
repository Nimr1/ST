// js/script.js

// --- Influence SDK / Game Logic (Simplified Stubs) ---
const InfluenceSDK = {
    MAX_RADIUS: 375.142,
    TOTAL_ASTEROIDS: 250000,
    PHI: Math.PI * (3 - Math.sqrt(5)),
    SPECTRAL_IDS: {
        C_TYPE: 1, CM_TYPE: 2, CI_TYPE: 3, CS_TYPE: 4, CMS_TYPE: 5, CIS_TYPE: 6,
        S_TYPE: 7, SM_TYPE: 8, SI_TYPE: 9, M_TYPE: 10, I_TYPE: 11
    },
    SPECTRAL_TYPE_NAMES: {
        1: 'C', 2: 'Cm', 3: 'Ci', 4: 'Cs', 5: 'Cms', 6: 'Cis',
        7: 'S', 8: 'Sm', 9: 'Si', 10: 'M', 11: 'I'
    },
    getRadius: function(asteroidId) {
        if (asteroidId <= 0) return 0;
        return this.MAX_RADIUS / Math.pow(asteroidId, 0.475);
    },
    getSurfaceArea: function(asteroidId, radius = 0) {
        if (asteroidId <= 0) return 0;
        radius = radius || this.getRadius(asteroidId);
        if (radius <= 0) return 0;
        const area = 4 * Math.PI * Math.pow(radius, 2);
        return Math.floor(area);
    },
    getGenericSpectralTypeName: function(asteroidId) {
        const parsedId = parseInt(asteroidId);
        if (isNaN(parsedId) || parsedId <= 0) return 'UnknownType';
        const typeIndex = (parsedId % Object.keys(this.SPECTRAL_IDS).length) + 1;
        return this.SPECTRAL_TYPE_NAMES[typeIndex] || 'UnknownType';
    },
    Entity: {
        getBaseName: function(asteroidId) {
            const genericTypeName = InfluenceSDK.getGenericSpectralTypeName(asteroidId);
            return `${asteroidId}-${genericTypeName}`;
        }
    }
};
// --- End Influence SDK Stubs ---

// --- Hardcoded Game Data (Generated by your SDK reading script) ---
const INFLUENCE_GAME_DATA = {
    buildings: [
        { "id": "1", "name": "Warehouse" }, { "id": "2", "name": "Extractor" },
        { "id": "3", "name": "Refinery" }, { "id": "4", "name": "Bioreactor" },
        { "id": "5", "name": "Factory" }, { "id": "6", "name": "Shipyard" },
        { "id": "7", "name": "Spaceport" }, { "id": "8", "name": "Marketplace" },
        { "id": "9", "name": "Habitat" }, { "id": "10", "name": "Tank Farm" }
    ],
    resources: [
        { "id": "33", "name": "Acetylene" }, { "id": "73", "name": "Acrylonitrile" },
        { "id": "88", "name": "Alumina" }, { "id": "97", "name": "Alumina Ceramic" },
        { "id": "111", "name": "Aluminium" }, { "id": "122", "name": "Aluminium Beam" },
        { "id": "146", "name": "Aluminium Hull Plate" }, { "id": "124", "name": "Aluminium Pipe" },
        { "id": "123", "name": "Aluminium Sheet" }, { "id": "147", "name": "Aluminium Truss" },
        { "id": "3", "name": "Ammonia" }, { "id": "34", "name": "Ammonium Carbonate" },
        { "id": "110", "name": "Ammonium Chloride" }, { "id": "142", "name": "Ammonium Diuranate" },
        { "id": "93", "name": "Ammonium Oxalate" }, { "id": "143", "name": "Ammonium Paratungstate" },
        { "id": "9", "name": "Apatite" }, { "id": "242", "name": "Attitude Control Module" },
        { "id": "98", "name": "Austenitic Nichrome" }, { "id": "240", "name": "Avionics Module" },
        { "id": "132", "name": "Ball Bearing" }, { "id": "121", "name": "Ball Valve" },
        { "id": "152", "name": "Bare Circuit Board" }, { "id": "43", "name": "Bare Copper Wire" },
        { "id": "218", "name": "Beryllia" }, { "id": "219", "name": "Beryllia Ceramic" },
        { "id": "217", "name": "Beryllium Carbonate" }, { "id": "108", "name": "Bisphenol A" },
        { "id": "10", "name": "Bitumen" }, { "id": "47", "name": "Borax" },
        { "id": "79", "name": "Boria" }, { "id": "84", "name": "Boric Acid" },
        { "id": "134", "name": "Boron" }, { "id": "131", "name": "Borosilicate Glass" },
        { "id": "206", "name": "Brushless Motor" }, { "id": "205", "name": "Brushless Motor Rotor" },
        { "id": "204", "name": "Brushless Motor Stator" }, { "id": "11", "name": "Calcite" },
        { "id": "112", "name": "Calcium" }, { "id": "78", "name": "Calcium Chloride" },
        { "id": "6", "name": "Carbon Dioxide" }, { "id": "128", "name": "Carbon Fiber" },
        { "id": "7", "name": "Carbon Monoxide" }, { "id": "148", "name": "Cargo Module" },
        { "id": "167", "name": "Cargo Ring" }, { "id": "173", "name": "CCD" },
        { "id": "44", "name": "Cement" }, { "id": "76", "name": "Chlorine" },
        { "id": "161", "name": "Chromia" }, { "id": "178", "name": "Chromium" },
        { "id": "203", "name": "Circuit Board" }, { "id": "234", "name": "Closed-cycle Gas Core Nuclear Reactor Engine" },
        { "id": "15", "name": "Coffinite" }, { "id": "126", "name": "Cold Gas Thruster" },
        { "id": "127", "name": "Cold Gas Torque Thruster" }, { "id": "233", "name": "Composite-overwrapped Reactor Shell" },
        { "id": "213", "name": "Computer" }, { "id": "174", "name": "Computer Chip" },
        { "id": "214", "name": "Control Moment Gyroscope" }, { "id": "30", "name": "Copper" },
        { "id": "99", "name": "Copper Wire" }, { "id": "175", "name": "Core Drill" },
        { "id": "154", "name": "Core Drill Bit" }, { "id": "155", "name": "Core Drill Thruster" },
        { "id": "24", "name": "Deionized Water" }, { "id": "197", "name": "Diepoxy Prepolymer Resin" },
        { "id": "119", "name": "Diode" }, { "id": "144", "name": "Engine Bell" },
        { "id": "107", "name": "Epichlorohydrin" }, { "id": "136", "name": "Epoxy" },
        { "id": "241", "name": "Escape Module" }, { "id": "12", "name": "Feldspar" },
        { "id": "118", "name": "Ferrite" }, { "id": "153", "name": "Ferrite-bead Inductor" },
        { "id": "95", "name": "Ferrochromium" }, { "id": "141", "name": "Ferromolybdenum" },
        { "id": "57", "name": "Ferrosilicon" }, { "id": "68", "name": "Fiber Optic Cable" },
        { "id": "211", "name": "Fiber Optic Gyroscope" }, { "id": "42", "name": "Fiberglass" },
        { "id": "231", "name": "Flow Divider Moderator" }, { "id": "237", "name": "Fluids Automation Module" },
        { "id": "116", "name": "Fluorine" }, { "id": "129", "name": "Food" },
        { "id": "225", "name": "Fuel Make-up Tank" }, { "id": "41", "name": "Fused Quartz" },
        { "id": "229", "name": "Fused Quartz Lightbulb Tube" }, { "id": "61", "name": "Gold" },
        { "id": "19", "name": "Graphite" }, { "id": "235", "name": "Habitation Module" },
        { "id": "221", "name": "Heat Exchanger" }, { "id": "168", "name": "Heavy Transport Hull" },
        { "id": "185", "name": "Highly Enriched Uranium Hexafluoride" }, { "id": "188", "name": "Highly Enriched Uranium Powder" },
        { "id": "81", "name": "Hydrochloric Acid" }, { "id": "82", "name": "Hydrofluoric Acid" },
        { "id": "2", "name": "Hydrogen" }, { "id": "193", "name": "Hydrogen Heptafluorotantalate and Niobate" },
        { "id": "170", "name": "Hydrogen Propellant" }, { "id": "29", "name": "Iron" },
        { "id": "63", "name": "Iron Oxide" }, { "id": "37", "name": "Iron Sulfide" },
        { "id": "208", "name": "Landing Auger" }, { "id": "207", "name": "Landing Leg" },
        { "id": "133", "name": "Large Thrust Bearing" }, { "id": "120", "name": "Laser Diode" },
        { "id": "114", "name": "Leached Coffinite" }, { "id": "189", "name": "Leached Feldspar" },
        { "id": "194", "name": "Lead" }, { "id": "38", "name": "Lead Sulfide" },
        { "id": "166", "name": "Light Transport Hull" }, { "id": "227", "name": "Lightbulb End Moderators" },
        { "id": "158", "name": "LiPo Battery" }, { "id": "135", "name": "Lithium" },
        { "id": "48", "name": "Lithium Carbonate" }, { "id": "105", "name": "Lithium Chloride" },
        { "id": "80", "name": "Lithium Sulfate" }, { "id": "87", "name": "Magnesia" },
        { "id": "75", "name": "Magnesium" }, { "id": "49", "name": "Magnesium Chloride" },
        { "id": "16", "name": "Merrillite" }, { "id": "8", "name": "Methane" },
        { "id": "236", "name": "Mobility Module" }, { "id": "40", "name": "Molybdenum Disulfide" },
        { "id": "65", "name": "Molybdenum Trioxide" }, { "id": "27", "name": "Naphtha" },
        { "id": "103", "name": "Natural Flavorings" }, { "id": "186", "name": "Nd:YAG Laser" },
        { "id": "181", "name": "Nd:YAG Laser Rod" }, { "id": "176", "name": "Neodymium" },
        { "id": "183", "name": "Neodymium Magnet" }, { "id": "137", "name": "Neodymium Oxide" },
        { "id": "159", "name": "Neodymium Trichloride" }, { "id": "220", "name": "Neon" },
        { "id": "226", "name": "Neon Make-up Tank" }, { "id": "224", "name": "Neon/Fuel Separator Centrifuge" },
        { "id": "182", "name": "Nichrome" }, { "id": "31", "name": "Nickel" },
        { "id": "86", "name": "Nickel Oxide" }, { "id": "54", "name": "Nitric Acid" },
        { "id": "4", "name": "Nitrogen" }, { "id": "140", "name": "Novolak Prepolymer Resin" },
        { "id": "232", "name": "Nuclear Lightbulb" }, { "id": "13", "name": "Olivine" },
        { "id": "59", "name": "Oxalic Acid" }, { "id": "23", "name": "Oxygen" },
        { "id": "156", "name": "Parabolic Dish" }, { "id": "200", "name": "PEDOT" },
        { "id": "36", "name": "Phosphate and Sulfate Salts" }, { "id": "83", "name": "Phosphoric Acid" },
        { "id": "162", "name": "Photoresist Epoxy" }, { "id": "157", "name": "Photovoltaic Panel" },
        { "id": "104", "name": "Platinum" }, { "id": "102", "name": "Polyacrylonitrile" },
        { "id": "125", "name": "Polyacrylonitrile Fabric" }, { "id": "201", "name": "Polymer Tantalum Capacitor" },
        { "id": "74", "name": "Polypropylene" }, { "id": "192", "name": "Potassium Carbonate" },
        { "id": "46", "name": "Potassium Chloride" }, { "id": "195", "name": "Potassium Fluoride" },
        { "id": "196", "name": "Potassium Heptafluorotantalate" }, { "id": "90", "name": "Potassium Hydroxide" },
        { "id": "92", "name": "Potatoes" }, { "id": "243", "name": "Power Module" },
        { "id": "149", "name": "Pressure Vessel" }, { "id": "150", "name": "Propellant Tank" },
        { "id": "245", "name": "Propulsion Module" }, { "id": "50", "name": "Propylene" },
        { "id": "209", "name": "Pump" }, { "id": "180", "name": "Pure Nitrogen" },
        { "id": "14", "name": "Pyroxene" }, { "id": "32", "name": "Quicklime" },
        { "id": "210", "name": "Radio Antenna" }, { "id": "109", "name": "Rare Earth Oxides" },
        { "id": "94", "name": "Rare Earth Sulfates" }, { "id": "25", "name": "Raw Salts" },
        { "id": "230", "name": "Reactor Plumbing Assembly" }, { "id": "18", "name": "Rhabdite" },
        { "id": "191", "name": "Rhabdite Slag" }, { "id": "190", "name": "Roasted Rhabdite" },
        { "id": "215", "name": "Robotic Arm" }, { "id": "165", "name": "Shuttle Hull" },
        { "id": "26", "name": "Silica" }, { "id": "66", "name": "Silica Powder" },
        { "id": "53", "name": "Silicon" }, { "id": "100", "name": "Silicon Wafer" },
        { "id": "60", "name": "Silver" }, { "id": "130", "name": "Small Propellant Tank" },
        { "id": "28", "name": "Sodium Bicarbonate" }, { "id": "77", "name": "Sodium Carbonate" },
        { "id": "45", "name": "Sodium Chloride" }, { "id": "113", "name": "Sodium Chromate" },
        { "id": "139", "name": "Sodium Dichromate" }, { "id": "89", "name": "Sodium Hydroxide" },
        { "id": "117", "name": "Sodium Tungstate" }, { "id": "56", "name": "Soil" },
        { "id": "67", "name": "Solder" }, { "id": "238", "name": "Solids Automation Module" },
        { "id": "91", "name": "Soybeans" }, { "id": "64", "name": "Spirulina and Chlorella Algae" },
        { "id": "151", "name": "Stainless Steel" }, { "id": "172", "name": "Stainless Steel Pipe" },
        { "id": "171", "name": "Stainless Steel Sheet" }, { "id": "212", "name": "Star Tracker" },
        { "id": "52", "name": "Steel" }, { "id": "69", "name": "Steel Beam" },
        { "id": "101", "name": "Steel Cable" }, { "id": "71", "name": "Steel Pipe" },
        { "id": "70", "name": "Steel Sheet" }, { "id": "145", "name": "Steel Truss" },
        { "id": "72", "name": "Steel Wire" }, { "id": "51", "name": "Sulfur" },
        { "id": "5", "name": "Sulfur Dioxide" }, { "id": "55", "name": "Sulfuric Acid" },
        { "id": "202", "name": "Surface Mount Device Reel" }, { "id": "20", "name": "Taenite" },
        { "id": "199", "name": "Tantalum" }, { "id": "239", "name": "Terrain Interface Module" },
        { "id": "244", "name": "Thermal Module" }, { "id": "187", "name": "Thin-film Resistor" },
        { "id": "62", "name": "Tin" }, { "id": "39", "name": "Tin Sulfide" },
        { "id": "35", "name": "Triple Superphosphate" }, { "id": "21", "name": "Troilite" },
        { "id": "164", "name": "Tungsten" }, { "id": "169", "name": "Tungsten Powder" },
        { "id": "222", "name": "Turbopump" }, { "id": "184", "name": "Unenriched Uranium Hexafluoride" },
        { "id": "22", "name": "Uraninite" }, { "id": "163", "name": "Uranium Dioxide" },
        { "id": "179", "name": "Uranium Tetrafluoride" }, { "id": "115", "name": "Uranyl Nitrate" },
        { "id": "1", "name": "Water" }, { "id": "58", "name": "Weathered Olivine" },
        { "id": "17", "name": "Xenotime" }, { "id": "96", "name": "Yellowcake" },
        { "id": "138", "name": "Yttria" }, { "id": "106", "name": "Zinc" },
        { "id": "85", "name": "Zinc Oxide" }
    ].sort((a,b) => a.name.localeCompare(b.name))
};

function populateGameData() {
    // Buildings and Resources are now hardcoded directly in INFLUENCE_GAME_DATA.
    console.log("INFLUENCE_GAME_DATA (with hardcoded buildings/resources) ready.");
}
populateGameData();

const SWAY_TOKEN_CONTRACT_ADDRESS = "0x04878d1148318a31829523ee9c6a5ee563af6cd87f90a30809e5b0d27db8a9b";

// --- Core Application Logic ---
let tasks = [];
let nextTaskId = 1;
let userStats = { accepted: 0, submitted: 0 };
let currentSort = { columnKey: null, direction: 'asc' };

// Ensure starknetService is declared (even if just as a placeholder if starknet.js is not loaded yet)
// This might be better handled by ensuring starknet.js loads first or by checking for its existence.
var starknetService = window.starknetService || {};


document.addEventListener('DOMContentLoaded', () => {
    const logTaskBtn = document.getElementById('logTaskBtn');
    const chooseTaskBtn = document.getElementById('chooseTaskBtn');
    const viewMyTasksBtn = document.getElementById('viewMyTasksBtn');
    const logTaskModal = document.getElementById('logTaskModal');
    const closeLogTaskModalBtn = document.getElementById('closeLogTaskModal');
    const chooseTaskView = document.getElementById('chooseTaskView');
    const myTasksView = document.getElementById('myTasksView');
    const taskTableBody = document.getElementById('taskTableBody');
    const myTaskTableBody = document.getElementById('myTaskTableBody');
    const tasksAcceptedStat = document.getElementById('tasksAcceptedStat');
    const tasksSubmittedStat = document.getElementById('tasksSubmittedStat');
    const successRateStat = document.getElementById('successRateStat');
    const userStatsSection = document.getElementById('userStatsSection');


    const logTaskForm = document.getElementById('logTaskForm');
    const requestTypeSelect = document.getElementById('influenceRequestType');
    const itemSelectionContainer = document.getElementById('itemSelectionContainer');
    const itemSelectLabel = document.getElementById('itemSelectLabel');
    const itemSelect = document.getElementById('influenceItemSelect');
    const itemQuantityContainer = document.getElementById('itemQuantityContainer');
    const itemQuantityInput = document.getElementById('influenceItemQuantity');
    const asteroidIdInput = document.getElementById('influenceLocationAsteroid');
    const plotContainer = document.getElementById('locationPlotContainer');
    const plotInput = document.getElementById('influenceLocationPlot');
    const paymentAmountSmallHint = document.querySelector('#logTaskForm label[for="influencePaymentAmount"] + small');

    function initializeApp() {
        updateUI();
        setupSorting();
        setupFiltering();
        // Initial UI state for wallet-dependent sections
        if (userStatsSection) userStatsSection.style.display = starknetService.address ? 'block' : 'none';

    }

    function populateSelect(selectElement, items, defaultOptionText = "-- Select --") {
        if (!selectElement) return;
        selectElement.innerHTML = `<option value="">${defaultOptionText}</option>`;
        items.forEach(item => {
            const option = document.createElement('option');
            option.value = item.id;
            option.textContent = item.name;
            selectElement.appendChild(option);
        });
    }

    if (paymentAmountSmallHint) {
        paymentAmountSmallHint.textContent = `Payment will be made in SWAY. Contract: ...${SWAY_TOKEN_CONTRACT_ADDRESS.slice(-6)}`;
    }

    if (requestTypeSelect) {
        requestTypeSelect.addEventListener('change', function() {
            const selectedType = this.value;
            if (itemSelectionContainer) itemSelectionContainer.style.display = 'none';
            if (itemQuantityContainer) itemQuantityContainer.style.display = 'none';
            if (itemSelect) itemSelect.innerHTML = '';
            if (itemQuantityInput) { itemQuantityInput.value = ''; itemQuantityInput.required = false; }
            if (itemSelect) itemSelect.required = false;

            if (selectedType === "BUILD") {
                if (itemSelectLabel) itemSelectLabel.textContent = "Building to Construct:";
                populateSelect(itemSelect, INFLUENCE_GAME_DATA.buildings, "-- Select Building --");
                if (itemSelectionContainer) itemSelectionContainer.style.display = 'block';
                if (itemSelect) itemSelect.required = true;
            } else if (selectedType === "DELIVER") {
                if (itemSelectLabel) itemSelectLabel.textContent = "Resource to Deliver:";
                populateSelect(itemSelect, INFLUENCE_GAME_DATA.resources, "-- Select Resource --");
                if (itemSelectionContainer) itemSelectionContainer.style.display = 'block';
                if (itemSelect) itemSelect.required = true;
                if (itemQuantityContainer) itemQuantityContainer.style.display = 'block';
                if (itemQuantityInput) itemQuantityInput.required = true;
            }
        });
    }

    if (asteroidIdInput) {
        asteroidIdInput.addEventListener('input', function() {
            if (!plotContainer || !plotInput) return;
            const asteroidId = parseInt(this.value);

            if (asteroidId && asteroidId >= 1 && asteroidId <= InfluenceSDK.TOTAL_ASTEROIDS) {
                plotContainer.style.display = 'block';
                plotInput.required = true;
                const surfaceArea = InfluenceSDK.getSurfaceArea(asteroidId);
                plotInput.placeholder = `e.g., 1 (Max Plot ID: ${surfaceArea})`;
                plotInput.max = surfaceArea;
                plotInput.min = 1;
                plotInput.value = ''; // Clear previous plot value
            } else {
                plotContainer.style.display = 'none';
                plotInput.required = false;
                plotInput.value = '';
                plotInput.placeholder = "e.g., 1";
                plotInput.max = null;
                plotInput.min = null;
            }
        });
    }

    if (logTaskBtn) {
        logTaskBtn.addEventListener('click', () => {
            if (!starknetService || !starknetService.address /*|| !starknetService.isDappLoggedIn*/) { // isDappLoggedIn check can be added back if needed
                alert("Please connect your wallet (and complete dApp sign-in if prompted) to log a new task.");
                return;
            }
            if (logTaskModal) {
                logTaskModal.style.display = 'flex';
                if (logTaskForm) logTaskForm.reset(); // Reset the entire form
                // Manually ensure dynamic sections are hidden after form reset
                if(requestTypeSelect) requestTypeSelect.value = ""; // Also reset select itself
                if(itemSelectionContainer) itemSelectionContainer.style.display = 'none';
                if(itemQuantityContainer) itemQuantityContainer.style.display = 'none';
                if(plotContainer) plotContainer.style.display = 'none';
                if(plotInput) { plotInput.placeholder = "e.g., 1"; plotInput.max = null; plotInput.min = null;}
            }
        });
    }
    if (closeLogTaskModalBtn) closeLogTaskModalBtn.addEventListener('click', () => { if (logTaskModal) logTaskModal.style.display = 'none'; });
    window.addEventListener('click', (event) => { if (event.target == logTaskModal) logTaskModal.style.display = 'none'; });

    if (chooseTaskBtn) {
        chooseTaskBtn.addEventListener('click', () => {
            if (chooseTaskView) chooseTaskView.style.display = 'block';
            if (myTasksView) myTasksView.style.display = 'none';
            if (logTaskModal) logTaskModal.style.display = 'none';
            renderTasks();
        });
    }

    if (viewMyTasksBtn) {
        viewMyTasksBtn.addEventListener('click', () => {
            if (!starknetService.address) {
                alert("Please connect your wallet to see your tasks.");
                return;
            }
            if (chooseTaskView) chooseTaskView.style.display = 'none';
            if (myTasksView) myTasksView.style.display = 'block';
            if (logTaskModal) logTaskModal.style.display = 'none';
            renderMyTasks();
        });
    }


    if (logTaskForm) {
        logTaskForm.addEventListener('submit', function(event) {
            event.preventDefault();
            if (!starknetService || !starknetService.address) { alert("Wallet not connected."); return; }

            const requestType = document.getElementById('influenceRequestType').value;
            const itemIdSelected = document.getElementById('influenceItemSelect').value;
            const itemNameSelected = document.getElementById('influenceItemSelect').selectedOptions[0]?.textContent || itemIdSelected;
            let itemQuantity = null;
            if (requestType === "DELIVER") {
                itemQuantity = parseInt(document.getElementById('influenceItemQuantity').value);
            } else if (requestType === "BUILD") {
                itemQuantity = 1;
            }

            const paymentAmount = parseFloat(document.getElementById('influencePaymentAmount').value);
            const asteroidIdValue = document.getElementById('influenceLocationAsteroid').value;
            const asteroidId = asteroidIdValue ? parseInt(asteroidIdValue) : null;

            const plotIdValue = document.getElementById('influenceLocationPlot').value;
            const plotId = plotIdValue ? parseInt(plotIdValue) : null;
            const deadlineDays = parseInt(document.getElementById('influenceDeadline').value);

            if (!requestType) { alert("Please select a Request Type."); return; }
            if (!itemIdSelected) { alert(requestType === "BUILD" ? "Please select a Building." : "Please select a Resource."); return; }
            if (requestType === "DELIVER" && (itemQuantity === null || isNaN(itemQuantity) || itemQuantity <= 0)) { alert("Please enter a valid Quantity for resource delivery."); return; }
            if (!paymentAmount || paymentAmount <= 0) { alert("Please enter a valid Payment Amount."); return; }
            if (!asteroidId || asteroidId < 1 || asteroidId > InfluenceSDK.TOTAL_ASTEROIDS) {
                alert(`Please enter a valid Target Asteroid ID (1 - ${InfluenceSDK.TOTAL_ASTEROIDS}).`); return;
            }
            if (document.getElementById('influenceLocationPlot').required && (plotId === null || isNaN(plotId) || plotId < 1 )) {
                 alert("Please enter a valid Target Plot ID (must be 1 or greater)."); return;
            }
            if (plotId !== null && asteroidId) {
                const maxPlots = InfluenceSDK.getSurfaceArea(asteroidId);
                if (plotId > maxPlots) {
                    alert(`Invalid Plot ID. Maximum plot ID for asteroid ${asteroidId} is ${maxPlots}. You entered ${plotId}.`);
                    return;
                }
            }
            if (!deadlineDays) { alert("Please select a Deadline."); return; }

            const creationTime = Math.floor(Date.now() / 1000);
            const deadlineTimestamp = creationTime + (deadlineDays * 24 * 60 * 60);

            const newTaskDataForSC = {
                creator_address: starknetService.address, request_type_val: requestType,
                item_id_val: itemIdSelected,
                item_quantity_val: itemQuantity !== null ? itemQuantity : (requestType === "BUILD" ? 1 : 0),
                payment_amount_val: paymentAmount, payment_token_address_val: SWAY_TOKEN_CONTRACT_ADDRESS,
                location_asteroid_id_val: asteroidId, location_plot_id_val: plotId,
                deadline_timestamp_val: deadlineTimestamp, creation_timestamp_val: creationTime,
            };
            console.log("New Influence Task Data (Prepared for SC):", newTaskDataForSC);

            const asteroidDisplayName = `Asteroid ${InfluenceSDK.Entity.getBaseName(asteroidId)}`;

            const tempFrontendTask = {
                id: `temp_${nextTaskId++}`,
                requestType: requestType, itemName: itemNameSelected, itemQuantity: itemQuantity,
                paymentAmount: paymentAmount, paymentMethod: "SWAY",
                asteroidId: asteroidId, plotId: plotId,
                deadline: new Date(deadlineTimestamp * 1000).toISOString(),
                status: 'Open (Local)',
                creator: starknetService.address, // <-- CHANGE: Store full address
                assignee: null,
            };
            tasks.unshift(tempFrontendTask);
            renderTasks();

            if (logTaskModal) logTaskModal.style.display = 'none';
             if (logTaskForm) logTaskForm.reset();
                if(requestTypeSelect) requestTypeSelect.value = "";
                if(itemSelectionContainer) itemSelectionContainer.style.display = 'none';
                if(itemQuantityContainer) itemQuantityContainer.style.display = 'none';
                if(plotContainer) plotContainer.style.display = 'none';
                if(itemSelect) itemSelect.innerHTML = '<option value="">-- Select --</option>';
                if(plotInput) { plotInput.placeholder = "e.g., 1"; plotInput.max = null; plotInput.min = null;}
        });
    }

    function getDaysTillDeadline(deadline) {
        if (!deadline) return 'N/A';
        const now = new Date(); const deadlineDate = new Date(deadline);
        if (isNaN(deadlineDate.getTime())) return 'N/A';
        const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
        const dLineDateOnly = new Date(deadlineDate.getFullYear(), deadlineDate.getMonth(), deadlineDate.getDate());
        const diffTime = dLineDateOnly - today;
        return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    }

    function shortenAddress(address) {
        if (!address) return 'N/A';
        return address.length > 10 ? `${address.substring(0, 6)}...${address.substring(address.length - 4)}` : address;
    }

    function renderTasks() {
        if (!taskTableBody) return;
        taskTableBody.innerHTML = '';
        let tasksToRender = filterTasks();
        tasksToRender = sortTasks(tasksToRender);

        if (tasksToRender.length === 0) {
            const row = taskTableBody.insertRow(); const cell = row.insertCell();
            cell.colSpan = 12;
            cell.textContent = "No tasks available or matching criteria.";
            cell.style.textAlign = "center";
            return;
        }

        tasksToRender.forEach(task => {
            const row = taskTableBody.insertRow();
            row.insertCell().textContent = task.id;
            row.insertCell().textContent = task.requestType;
            row.insertCell().textContent = task.itemName;
            row.insertCell().textContent = task.itemQuantity !== null ? task.itemQuantity : 'N/A';
            row.insertCell().textContent = `${task.paymentAmount} ${task.paymentMethod}`;
            row.insertCell().textContent = task.asteroidId !== null ? task.asteroidId : 'N/A';
            row.insertCell().textContent = task.plotId !== null ? task.plotId : 'N/A';
            row.insertCell().textContent = new Date(task.deadline).toLocaleString([], { year: 'numeric', month: '2-digit', day: '2-digit', hour: '2-digit', minute: '2-digit' });
            const daysLeft = getDaysTillDeadline(task.deadline);
            const daysLeftCell = row.insertCell(); daysLeftCell.textContent = daysLeft;
            if (typeof daysLeft === 'number') {
                if (daysLeft < 0) { daysLeftCell.style.color = '#FF8C00'; if (task.status === 'Open' || task.status === 'Accepted'  || task.status === 'Open (Local)') task.status = 'Expired';}
                else if (daysLeft <= 2) { daysLeftCell.style.color = '#FF8C00'; }
            }
            row.insertCell().textContent = task.status;
            row.insertCell().textContent = shortenAddress(task.creator); // <-- CHANGE: Shorten for display
            const actionCell = row.insertCell();
            if (task.status === 'Open' || task.status === 'Open (Local)') {
                if (starknetService.address && task.creator?.toLowerCase() !== starknetService.address.toLowerCase()) {
                    const acceptButton = document.createElement('button'); acceptButton.textContent = 'Accept';
                    acceptButton.onclick = () => acceptTask(task.id); actionCell.appendChild(acceptButton);
                } else if (!starknetService.address) { actionCell.textContent = 'Connect to accept'; }
                else { actionCell.textContent = 'Your Task'; }
            } else if (task.status === 'Accepted' && starknetService.address && task.assignee?.toLowerCase() === starknetService.address.toLowerCase()) {
                const submitButton = document.createElement('button'); submitButton.textContent = 'Submit Work';
                submitButton.onclick = () => submitTaskCompletion(task.id); actionCell.appendChild(submitButton);
            } else if (task.status.includes('Accepted')) { actionCell.textContent = 'In Progress by ' + shortenAddress(task.assignee); } // <-- CHANGE: Shorten for display
            else { actionCell.textContent = task.status; } // Handles 'Expired', 'Completed', etc.
        });
        updateSortIndicators();
    }

    function renderMyTasks() {
        if (!myTaskTableBody) return;
        myTaskTableBody.innerHTML = '';
        if (!starknetService.address) {
            const row = myTaskTableBody.insertRow();
            const cell = row.insertCell();
            cell.colSpan = 12;
            cell.textContent = "Please connect your wallet to view your tasks.";
            cell.style.textAlign = "center";
            return;
        }

        const myTasks = tasks.filter(task =>
            (task.creator && task.creator.toLowerCase() === starknetService.address.toLowerCase()) ||
            (task.assignee && task.assignee.toLowerCase() === starknetService.address.toLowerCase())
        );

        if (myTasks.length === 0) {
            const row = myTaskTableBody.insertRow();
            const cell = row.insertCell();
            cell.colSpan = 12;
            cell.textContent = "You have not created or accepted any tasks yet.";
            cell.style.textAlign = "center";
            return;
        }

        myTasks.forEach(task => {
            const row = myTaskTableBody.insertRow();
            // This is a simplified render; for a full implementation, this should mirror the main render function's structure.
            row.insertCell().textContent = task.id;
            row.insertCell().textContent = task.requestType;
            row.insertCell().textContent = task.itemName;
            row.insertCell().textContent = task.itemQuantity !== null ? task.itemQuantity : 'N/A';
            row.insertCell().textContent = `${task.paymentAmount} ${task.paymentMethod}`;
            row.insertCell().textContent = task.asteroidId;
            row.insertCell().textContent = task.plotId !== null ? task.plotId : 'N/A';
            row.insertCell().textContent = new Date(task.deadline).toLocaleString([], { year: 'numeric', month: '2-digit', day: '2-digit', hour: '2-digit', minute: '2-digit' });
            const daysLeft = getDaysTillDeadline(task.deadline);
            const daysLeftCell = row.insertCell();
            daysLeftCell.textContent = daysLeft;
            if (typeof daysLeft === 'number' && daysLeft < 0) {
                 if (task.status === 'Open' || task.status === 'Accepted' || task.status === 'Open (Local)') task.status = 'Expired';
            }
            row.insertCell().textContent = task.status;
            row.insertCell().textContent = shortenAddress(task.creator);

            const actionCell = row.insertCell();
             if (task.status === 'Accepted' && task.assignee?.toLowerCase() === starknetService.address.toLowerCase()) {
                const submitButton = document.createElement('button');
                submitButton.textContent = 'Submit Work';
                submitButton.onclick = () => submitTaskCompletion(task.id);
                actionCell.appendChild(submitButton);
            } else if (task.status === 'Open (Local)' || (task.creator && task.creator.toLowerCase() === starknetService.address.toLowerCase())) {
                 actionCell.textContent = 'Your Task';
            } else {
                actionCell.textContent = task.status;
            }
        });
    }

    function setupFiltering() {
         document.querySelectorAll('.filter-input').forEach(input => input.addEventListener('keyup', renderTasks));
    }
    function filterTasks() {
        const filters = Array.from(document.querySelectorAll('.filter-input')).map(input => ({
            columnIndexHTML: parseInt(input.dataset.column),
            value: input.value.toLowerCase()
        }));
        return tasks.filter(task => {
            return filters.every(filter => {
                if (!filter.value) return true;
                let cellValue = '';
                switch (filter.columnIndexHTML) {
                    case 1: cellValue = task.requestType; break;
                    case 2: cellValue = task.itemName; break;
                    case 3: cellValue = task.itemQuantity !== null ? String(task.itemQuantity) : ''; break;
                    case 4: cellValue = `${task.paymentAmount} ${task.paymentMethod}`; break;
                    case 5: cellValue = task.asteroidId !== null ? String(task.asteroidId) : ''; break;
                    case 6: cellValue = task.plotId !== null ? String(task.plotId) : ''; break;
                    case 7: cellValue = new Date(task.deadline).toLocaleString(); break;
                    case 8: cellValue = task.status; break;
                    case 9: cellValue = task.creator; break;
                    default: return true;
                }
                return String(cellValue).toLowerCase().includes(filter.value);
            });
        });
    }
    function setupSorting() {
        document.querySelectorAll('.task-table th[data-sortable="true"]').forEach(headerCell => {
            headerCell.addEventListener('click', (event) => {
                if (event.target.tagName.toLowerCase() === 'input') return;
                const columnKey = headerCell.dataset.columnKey;
                if (currentSort.columnKey === columnKey) currentSort.direction = currentSort.direction === 'asc' ? 'desc' : 'asc';
                else { currentSort.columnKey = columnKey; currentSort.direction = 'asc'; }
                renderTasks();
            });
        });
    }
    function getSortableValue(task, key) {
        switch (key) {
            case 'id': return typeof task.id === 'string' && task.id.startsWith('temp_') ? parseInt(task.id.split('_')[1]) : task.id;
            case 'requestType': return task.requestType;
            case 'itemName': return task.itemName;
            case 'itemQuantity': return task.itemQuantity !== null ? task.itemQuantity : -1;
            case 'payment': return task.paymentAmount;
            case 'asteroidId': return task.asteroidId !== null ? task.asteroidId : -1;
            case 'plotId': return task.plotId !== null ? task.plotId : -1;
            case 'deadline': return new Date(task.deadline).getTime();
            case 'daysLeft':
                const days = getDaysTillDeadline(task.deadline);
                return typeof days === 'number' ? days : (currentSort.direction === 'asc' ? Infinity : -Infinity);
            case 'status': return task.status;
            case 'creator': return task.creator;
            default: return '';
        }
    }
    function sortTasks(tasksArray) {
        if (!currentSort.columnKey) return tasksArray;
        return [...tasksArray].sort((a, b) => {
            let valA = getSortableValue(a, currentSort.columnKey); let valB = getSortableValue(b, currentSort.columnKey);
            let comparison = 0;
            if (typeof valA === 'string' && typeof valB === 'string') { valA = valA.toLowerCase(); valB = valB.toLowerCase(); }
            if (valA > valB) comparison = 1; else if (valA < valB) comparison = -1;
            return currentSort.direction === 'asc' ? comparison : comparison * -1;
        });
    }
    function updateSortIndicators() {
        document.querySelectorAll('.task-table th .sort-indicator').forEach(indicator => indicator.textContent = '');
        if (currentSort.columnKey) {
            const activeHeader = document.querySelector(`.task-table th[data-column-key="${currentSort.columnKey}"] .sort-indicator`);
            if (activeHeader) activeHeader.textContent = currentSort.direction === 'asc' ? ' ↑' : ' ↓';
        }
    }
    function acceptTask(taskId) {
        console.log(`Attempting to accept task ${taskId}`);
        if (!starknetService.address) { alert("Please connect wallet to accept tasks."); return; }
        const task = tasks.find(t => t.id === taskId);
        if (task && (task.status === 'Open' || task.status === 'Open (Local)')) {
            alert(`TODO: Implement on-chain 'acceptTask(${taskId})'. Simulating frontend update.`);
            task.status = 'Accepted';
            task.assignee = starknetService.address; // <-- CHANGE: Store full address
            userStats.accepted++;
            updateUserStatsUI();
            renderTasks();
            renderMyTasks(); // Re-render my tasks view as well
        }
    }
    function submitTaskCompletion(taskId) {
        console.log(`Attempting to submit task ${taskId}`);
        if (!starknetService.address) { alert("Please connect wallet to submit tasks."); return; }
        const task = tasks.find(t => t.id === taskId && t.assignee?.toLowerCase() === starknetService.address.toLowerCase());
        if (task && task.status === 'Accepted') {
            alert(`TODO: Implement on-chain 'submitTaskCompletion(${taskId})'. Simulating frontend update.`);
            task.status = 'Completed (Pending Review)';
            userStats.submitted++;
            updateUserStatsUI();
            renderTasks();
            renderMyTasks();
        }
    }
    function updateUI() {
        updateUserStatsUI();
        document.querySelectorAll('.filter-input').forEach(input => input.value = '');
        renderTasks(); // Initial render of tasks
    }
    function updateUserStatsUI() {
        if (tasksAcceptedStat) tasksAcceptedStat.textContent = userStats.accepted;
        if (tasksSubmittedStat) tasksSubmittedStat.textContent = userStats.submitted;
        if (successRateStat) {
            if (userStats.accepted > 0) successRateStat.textContent = `${((userStats.submitted / userStats.accepted) * 100).toFixed(1)}%`;
            else successRateStat.textContent = 'N/A';
        }
        if (userStatsSection) userStatsSection.style.display = starknetService.address ? 'block' : 'none';
    }

    // Listen to custom wallet events from starknet.js to update UI
    document.addEventListener('starknetWallet:walletConnected', () => {
        if (userStatsSection) userStatsSection.style.display = 'block';
        renderTasks(); // Re-render tasks to show correct actions
    });
    document.addEventListener('starknetWallet:walletDisconnected', () => {
        if (userStatsSection) userStatsSection.style.display = 'none';
        if (chooseTaskView) chooseTaskView.style.display = 'none';
        if (myTasksView) myTasksView.style.display = 'none';
        renderTasks(); // Re-render tasks to hide actions
    });


    initializeApp();
});